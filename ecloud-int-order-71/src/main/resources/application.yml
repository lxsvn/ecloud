server:
  port: 71

spring:
  application:
    name: ecloud-int-order-service
  main:
    allow-bean-definition-overriding: true
  cloud:
    nacos:
      server-addr: 47.104.80.250:8848
  # 配置读写分离 & 分表
  shardingsphere:
    # 读写分离数据源：服务端多主多长，通过haproxy后，表现为一主、一从
    datasource:
      names: d0,d1
      d0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver        #mysql驱动包
        url: jdbc:mysql://47.104.80.250:3333/ecloud_order?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: E@w123456
      d1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver        #mysql驱动包
        url: jdbc:mysql://47.104.80.250:3334/ecloud_order?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai
        username: root
        password: E@w123456

    rules:
      sharding:
        tables:
          #订单主表分片
          t_order:
            actual-data-nodes: d0.t_order_$->{0..3}
            table-strategy:
              standard: #自定义分片。用于单分片键的标准分片场景
                sharding-column: order_no
                sharding-algorithm-name: t-order-inline
          #                precise-algorithm-class-name: com.ec.order.config.CustomShardingAlgorithmOrderConfig
          #                range-algorithm-class-name:   com.ec.order.config.CustomShardingAlgorithmOrderConfig
          #订单从表分片
          t_order_item:
            actual-data-nodes: d0.t_order_item_$->{0..1}
            table-strategy:
              standard:
                sharding-column: order_no
                sharding-algorithm-name: t-order-item-inline

        sharding-algorithms:
          t-order-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{order_no % 3}
          t-order-item-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_item_$->{order_no % 1}

      # 读写分离
      readwrite-splitting:
        load-balancers:
          round_robin:
            type: ROUND_ROBIN
        data-sources:
          pr_ds:
            write-data-source-name: d0
            read-data-source-names: d1
            load-balancer-name: round_robin

    # 打开sql输出日志
    props:
      sql-show: true

seata:
  enabled: true
  tx-service-group: ${spring.application.name}    #此处配置自定义的seata事务分组名称
  enable-auto-data-source-proxy: false
  service:
    vgroupMapping:
      ecloud_tx_group: default
  config:
    type: nacos
    nacos:
      server-addr: ${spring.cloud.nacos.server-addr}
      group: SEATA_GROUP
  registry:
    type: nacos
    nacos:
      server-addr: ${spring.cloud.nacos.server-addr}
      application: seata-server #这里必须和seata注册到nacos的服务名一样默认seata-server
      group: SEATA_GROUP #seata服务注册到nacos的组名SEATA_GROUP

mybatis:
  mapper-locations: classpath*:mapper/*.xml
  #数据表的字段下划线转驼峰开启
  configuration:
    map-underscore-to-camel-case: true

dubbo:
  protocol:
    port: -1
  scan:
    base-packages: com.ec.order.service.impl
  registry:
    address: zookeeper://47.104.80.250:2181
