server:
  port: 81

spring:
  profiles:
    active: dev
  main:
    allow-bean-definition-overriding: true
  application:
    name: ecloud-gateway-api
  cloud:

    nacos:
      server-addr: 47.104.80.250:8848 #配置Nacos地址

    gateway:
      routes: # 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]
        - id: account_route          # 当前路由的标识, 要求唯一
          uri: lb://ecloud-int-account-service  # lb指的是从nacos中按照名称获取微服务,并遵循负载均衡策略
          predicates: # 断言(就是路由转发要满足的条件)
            - Path=/account-svc/**       # 当请求路径满足Path指定的规则时,才进行路由转发
          filters:
            # 过滤器StripPrefix: 去掉请求路径的最前面n个部分截取掉。
            - StripPrefix=1

        - id: order_route
          uri: lb://ecloud-int-order-service
          predicates:
            - Path=/order-svc/**
          filters:
            - StripPrefix=1

        - id: product_route
          uri: lb://ecloud-int-product-service
          predicates:
            - Path=/product-svc/**
          filters:
            - StripPrefix=1

  redis:
    database: 2
    #redis服务器地址
    host: 47.104.80.250
    #redis连接端口号
    port: 6379
    #redis连接密码
    password: ED888888
    #redis连接超时时间（毫秒）
    timeout: 10000
    # 高版本springboot中使用jedis或者lettuce
    lettuce:
      pool:
        # 连接池最小空闲连接
        min-idle: 1
        # 连接池最大空闲连接
        max-idle: 10
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: -1

  kafka:
    bootstrap-servers: 47.104.80.250:9092 # kafka集群信息,多个用，分割
    producer: # 生产者配置
      retries: 3 # 设置大于0的值，则客户端会将发送失败的记录重新发送
      batch-size: 16384 #16K
      buffer-memory: 33554432 #32M
      acks: 1
      # 指定消息key和消息体的编解码方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    listener:
      # 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
      # RECORD
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
      # BATCH
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交
      # TIME
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
      # COUNT
      # TIME |　COUNT　有一个条件满足时提交
      # COUNT_TIME
      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交
      # MANUAL
      # 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种
      # MANUAL_IMMEDIATE
      ack-mode: manual_immediate




auth:
  enable: true
  ignore-url:
    - /account-svc/login/**
    - /account-svc/register/**